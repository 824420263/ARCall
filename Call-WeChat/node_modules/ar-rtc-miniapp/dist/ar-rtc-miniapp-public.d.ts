/**
 *
 */
declare class Client extends EventEmitter<ClientEvents> {
    /**
     * 用户ID
     *
     * @type {string}
     */
    uid: string;
    /**
     * 用户角色
     *
     * @type {string}
     */
    role: string;
    /**
     * 频道ID
     *
     * @type {string}
     */
    channelName: string;
    /**
     * 远程用户人员列表
     *
     * @type {RemoteUser[]}
     */
    remoteUser: RemoteUser[];
    /**
     * 本地视频是否开启
     *
     * @type {boolean}
     */
    enableVideo: boolean;
    /**
     * 本地音频是否开启
     *
     * @type {boolean}
     */
    enableAudio: boolean;








    constructor();
    /**
     * 销毁客户端对象。
     * @param onSuccess 方法调用成功时执行的回调函数。
     * @param onFailure 方法调用失败时执行的回调函数。返回值为错误码和错误信息。
     * - (err: { code: number; reason: string }): void
     *    - err: code: number
     *    - reason: string
     */
    destroy(onSuccess: () => void, onFailure: (err: {
        code: number;
        reason: string;
    }) => void): void;
    /**
     * 初始化客户端对象。
     * @param appId 你的小程序项目的 App ID。
     * @param onSuccess 方法调用成功时执行的回调函数。无返回值。
     * @param onFailure 方法调用失败时执行的回调函数。返回值为错误码和错误信息。
     * - (err: { code: number; reason: string }): void
     *    - code: number
     *    - reason: string
     */
    init(appId: string, onSuccess: () => void, onFailure: (err: {
        code: number;
        reason: string;
    }) => void): void;
    /**
     * 加入频道。
     * @param token 在 app 服务器端生成的用于鉴权的 Token：
     * - 安全要求不高：你可以使用控制台生成的临时 Token，详见[获取临时 Token]()。
     * - 安全要求高：将值设为你的服务端生成的正式 Token，详见[从服务端生成 Token]()。
     * @param channel 频道名，能标识直播频道的字符串。
     * @param uid 指定用户的 ID。32 位无符号整数。建议设置范围：1 到 (2^32-1)，并保证唯一性。
     * @param onSuccess 方法调用成功时执行的回调函数。返回值为用户 ID。
     * @param onFailure 方法调用失败时执行的回调函数。返回值为错误码和错误信息。
     */
    join(token: string | undefined, channel: string, uid: string | undefined, onSuccess: (uid: string) => void, onFailure: (err: {
        code: number;
        reason: string;
    }) => void): void;
    /**
     * 退出频道。
     * @param onSuccess 方法调用成功时执行的回调函数。无返回值。
     * @param onFailure 方法调用失败时执行的回调函数。返回值为错误码和错误信息。
     * - (err: { code: number; reason: string }): void
     *    - code: number
     *    - reason: string
     */
    leave(onSuccess: () => void, onFailure: (err?: {
        code: number;
        reason: string;
    }) => void): void;
    /**
     * 停止接收远端用户的音视频流。
     * @param uid 远端用户的 ID。
     * @param target 选择停止接收哪一种流，有三种选择：
     * - audio：本地用户发送的音频流，即声音。
     * - video：本地用户发送的视频流，即视频画面。
     * - all：本地用户发送的音视频流，即声音和视频画面。
     * @param onSuccess 方法调用成功时执行的回调函数。无返回值。
     * @param onFailure 方法调用失败时执行的回调函数。返回值为错误码和错误信息。
     * - (err: { code: number; reason: string }): void
     *    - code: number
     *    - reason: string
     */
    mute(uid: string, target: string, onSuccess: () => void, onFailure: (err?: {
        code: number;
        reason: string;
    }) => void): void;
    /**
     * 停止发送本地用户的音视频流。
     * @param target 选择停止发送哪一种流，有三种选择：
     * - audio：本地用户发送的音频流，即声音。
     * - video：本地用户发送的视频流，即视频画面。
     * - all：本地用户发送的音视频流，即声音和视频画面。
     * @param onSuccess 方法调用成功时执行的回调函数。无返回值。
     * @param onFailure 方法调用失败时执行的回调函数。返回值为错误码和错误信息。
     *  - (err: { code: number; reason: string }): void
     *    - code: number
     *    - reason: string
     */
    muteLocal(target: string, onSuccess: () => void, onFailure: (err?: {
        code: number;
        reason: string;
    }) => void): void;
    /**
     * 发布本地音视频流。
     *
     * 该方法将本地音视频流发布到 SD-RTN。互动直播中，调用该 API 的用户即默认为主播。
     *
     * @param onSuccess 方法调用成功时执行的回调函数。无返回值。
     * @param onFailure 方法调用失败时执行的回调函数。返回值为错误码和错误信息。
     *  - (err: { code: number; reason: string }): void
     *    - code: number
     *    - reason: string
     */
    publish(onSuccess: (url: string) => void, onFailure: (err?: {
        code: number;
        reason: string;
    }) => void): void;
    /**
     * 重新加入频道。
     *
     * 该方法让用户重新加入RTC频道。如果你的小程序中有切后台的场景需求，请确保使用该方法做好重连机制。
     *
     * @param token 在 app 服务器端生成的用于鉴权的 Token：
     * - 安全要求不高：你可以使用控制台生成的临时 Token，详见[获取临时 Token]()。
     * - 安全要求高：将值设为你的服务端生成的正式 Token，详见[从服务端生成 Token]()。
     * @param channel 频道名，能标识直播频道的字符串。
     * @param uid 指定用户的 ID。32 位无符号整数。建议设置范围：1 到 (2^32-1)，并保证唯一性。
     * @param uids 频道内已有用户的用户 ID 列表。
     * @param onSuccess 方法调用成功时执行的回调函数。无返回值。
     * @param onFailure 方法调用失败时执行的回调函数。返回值为错误码和错误信息。
     *  - (err: { code: number; reason: string }): void
     *    - code: number
     *    - reason: string
     */
    rejoin(token: string, channel: string, uid: string, uids: number, onSuccess: (uid: string) => void, onFailure: (err: {
        code: number;
        reason: string;
    }) => void): void;
    /**
     * 设置用户角色。
     *
     * 该方法设置用户角色。小程序端的用户角色默认为主播，因此在同时满足以下条件的使用场景中，必须调用该接口将小程序端的用户角色设置为观众再进入频道。
     * - 小程序 SDK 与 Native SDK 互通
     * - Native 端频道模式为直播模式
     * - 小程序作为观众端加入频道
     * 注：如果在主播已 publish 的状态下调用该方法将用户角色设置为 audience，会导致之前的推流地址无效。
     * @param role 用户角色。选择如下一种角色：
     * - broadcaster：(默认) 将用户角色设置为主播。主播可以调用 publish 和 unpublish 方法。
     * - audience：将用户角色设置为观众。观众不能调用 publish 和 unpublish 方法。
     * @param onSuccess 方法调用成功时执行的回调函数。无返回值。
     * @param onFailure 方法调用失败时执行的回调函数。返回值为错误码和错误信息。
     *  - (err: { code: number; reason: string }): void
     *    - code: number
     *    - reason: string
     */
    setRole(role: string, onSuccess: () => void, onFailure: (err?: {
        code: number;
        reason: string;
    }) => void): void;
    /**
     * 订阅远端音视频流。
     * 该方法从 SD-RTN 订阅并接收远端音视频流。
     * @param uid 要订阅的远端用户 ID。
     * @param onSuccess 方法调用成功时执行的回调函数。无返回值。
     * @param onFailure 方法调用失败时执行的回调函数。返回值为错误码和错误信息。
     *  - (err: { code: number; reason: string }): void
     *    - code: number
     *    - reason: string
     */
    subscribe(uid: string, onSuccess: (url: string) => void, onFailure: (err?: {
        code: number;
        reason: string;
    }) => void): void;
    /**
     * 恢复接收远端用户的音视频流。
     * @param uid 远端用户的 ID。
     * @param target 选择停止接收哪一种流，有三种选择：
     * - audio：本地用户发送的音频流，即声音。
     * - video：本地用户发送的视频流，即视频画面。
     * - all：本地用户发送的音视频流，即声音和视频画面。
     * @param onSuccess 方法调用成功时执行的回调函数。无返回值。
     * @param onFailure 方法调用失败时执行的回调函数。返回值为错误码和错误信息。
     *  - (err: { code: number; reason: string }): void
     *    - code: number
     *    - reason: string
     */
    unmute(uid: string, target: string, onSuccess: () => void, onFailure: (err?: {
        code: number;
        reason: string;
    }) => void): void;
    /**
     * 恢复发送本地用户的音视频流。
     * @param target 选择恢复发送哪一种流，有三种选择：
     * - audio：本地用户发送的音频流，即声音。
     * - video：本地用户发送的视频流，即视频画面。
     * - all：本地用户发送的音视频流，即声音和视频画面。
     * @param onSuccess 方法调用成功时执行的回调函数。无返回值。
     * @param onFailure 方法调用失败时执行的回调函数。返回值为错误码和错误信息。
     *  - (err: { code: number; reason: string }): void
     *    - code: number
     *    - reason: string
     */
    unmuteLocal(target: string, onSuccess?: () => void, onFailure?: (err?: {
        code: number;
        reason: string;
    }) => void): void;
    /**
     * 停止发布本地音视频流。
     * @param onSuccess 方法调用成功时执行的回调函数。无返回值。
     * @param onFailure 方法调用失败时执行的回调函数。返回值为错误码和错误信息。
     *  - (err: { code: number; reason: string }): void
     *    - code: number
     *    - reason: string
     */
    unpublish(onSuccess: () => void, onFailure: (err?: {
        code: number;
        reason: string;
    }) => void): void;
    /**
     * 停止订阅远端音视频流。
     * 该方法停止从 SD-RTN 订阅并接收远端音视频流。
     * @param uid 要停止订阅的远端用户 ID。
     * @param onSuccess 方法调用成功时执行的回调函数。无返回值。
     * @param onFailure 方法调用失败时执行的回调函数。返回值为错误码和错误信息。
     *  - (err: { code: number; reason: string }): void
     *    - code: number
     *    - reason: string
     */
    unsubscribe(uid: string, onSuccess: () => void, onFailure: (err?: {
        code: number;
        reason: string;
    }) => void): void;
    /**
     * 私有方法
     *
     * @param {{[key: string]: any}} options
     */
    setParameters(options: any): Promise<void>;



}

/**
 * 客户端回调事件
 *
 * @interface ClientEvents
 */
export declare interface ClientEvents {
    /**
     * 网络状态回调
     *
     * @param {string} curState
     * @param {string} revState
     * @param {string} reason
     */
    "connection-state-change"(curState: string, revState: string, reason: string): void;
    /**
     * 远端用户发布媒体流
     *
     * 收到该回调，可以选择是否 [[Client.subscribe]]（订阅）该用户的音视频流
     * @param {{ uid: string }} user
     */
    "stream-added"(user: {
        uid: string;
    }): void;
    /**
     * 远端用户取消发布媒体流
     *
     * 收到该回调，需要移除该用户的视图窗口
     * @param {{ uid: string }} user
     */
    "stream-removed"(user: {
        uid: string;
    }): void;
    /**
     * 远程用户关闭音频
     *
     * @param {{ uid: string }} user
     */
    "mute-audio"(user: {
        uid: string;
    }): void;
    /**
     * 远程用户关闭视频
     *
     * @param {{ uid: string }} user
     */
    "mute-video"(user: {
        uid: string;
    }): void;
    /**
     * 远程用户开启音频
     *
     * @param {{ uid: string }} user
     */
    "unmute-audio"(user: {
        uid: string;
    }): void;
    /**
     * 远程用户开启视频
     *
     * @param {{ uid: string }} user
     */
    "unmute-video"(user: {
        uid: string;
    }): void;
}

declare type ConnectionState = "DISCONNECTED" | "CONNECTING" | "RECONNECTING" | "CONNECTED" | "DISCONNECTING";

declare const _default: {
    client: typeof Client;
};
export default _default;

/**
 *
 *
 * @class EventEmitter
 */
declare class EventEmitter<T extends EventMap> {

    constructor();
    /**
     * Gets all the listeners of a specified event.
     *
     * @param {string} eventName
     * @returns
     */
    /**
     * Listens for a specified event.
     *
     * When the event happens, the callback that you pass is triggered.
     *
     * @event
     * @param {string} eventName
     * @param {Function} callback The callback to be triggered.
     */
    on<K extends keyof T>(eventName: K, callback: T[K]): void;
    /**
     *
     *
     * @param {string} eventName
     * @param {Function} callback
     */
    once<K extends keyof T>(eventName: K, callback: T[K]): void;
    /**
     *
     *
     * @param {string} eventName
     * @param {Function} callback
     */
    off<K extends keyof T>(eventName: K, callback: T[K]): void;
    /**
     *
     *
     * @param {string} [eventName]
     */
    removeAllListeners<K extends keyof T>(eventName?: K): void;
    /**
     *
     *
     * @param {string} eventName
     */
    emit<K extends keyof T>(eventName: K, ...args: any[]): void;

}

declare type EventMap = Record<string, any>;

declare interface RemoteUser {
    uid: string;
    hasSub: boolean;
    hasVideo: boolean;
    hasAudio: boolean;
    muteVideo: boolean;
    muteAudio: boolean;
}

export { }
